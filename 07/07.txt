学籍番号: 201720691
名前:	
課題番号：7
題名：タプル空間について
//////////////////////////////comment//////////////////////////////////
> 30:		try{//既に登録されているurlか確認
> 31:			result=(Count)space.take(template, null, JavaSpace.NO_WAIT);
> 32:			if(result!=null){//あったら初期化

これは、TOCTOU問題があります。

http://www.cs.tsukuba.ac.jp/~yas/cs/csys-2017/2017-11-17/index.html#toctou

> 78:		Count template = new Count();
> 79:		template.url=argv[0];

> 87:			cou.content = result.content+1;//new Integer(0) ;
> 88:			cou.url=argv[0];
> 89:			space.write(cou, null, net.jini.core.lease.Lease.FOREVER);

ok.

>129:	13351120059:homework koyama$ java -classpath .:/Users/koyama/Downloads/apache-river-2.2.2/lib/jini-core.jar:/Users/koyama/Downloads/apache-river-2.2.2/lib/jini-ext.jar:/Users/koyama/Downloads/apache-river-2.2.2/lib/reggie.jar:/Users/koyama/Downloads/apache-river-2.2.2/lib/outrigger.jar Countup http://www.example.com/
>130:	count:1
>131:	url:http://www.example.com/
>132:	13351120059:homework koyama$ java -classpath .:/Users/koyama/Downloads/apache-river-2.2.2/lib/jini-core.jar:/Users/koyama/Downloads/apache-river-2.2.2/lib/jini-ext.jar:/Users/koyama/Downloads/apache-river-2.2.2/lib/reggie.jar:/Users/koyama/Downloads/apache-river-2.2.2/lib/outrigger.jar Countup http://www.example.com/
>133:	count:2

ok.
///////////////////////////////////////////////////////////////////////

問題(701)タプル空間の仕組みを使ってWWW のアクセス・カウンタのような動きをするプ ログラム使って作りなさい。
(1) 初期化プログラム
(2) カウンタプログラム

 初期化プログラムについてのソースコードを示す。
/////////////////////////////Initcou.java/////////////////////////////////

import net.jini.space.JavaSpace;

class Initcou {
    public static void main(String[] argv)
    {
	Lookup finder = new Lookup(JavaSpace.class);
	JavaSpace space = (JavaSpace) finder.getService();
	if( space == null )
	{
	    System.err.println("No JavaSpace found.");
	    System.exit( 1 );
	}
	Count cou = new Count();
	Count template = new Count();
	template.url=argv[0];
	Count result;

	try{//既に登録されているurlか確認
		result=(Count)space.take(template, null, JavaSpace.NO_WAIT);
		if(result!=null){//あったら初期化
		cou.content = 1;
		cou.url=argv[0];
		space.write(cou, null, net.jini.core.lease.Lease.FOREVER);
			System.exit( 0 );
		}
	}catch(Exception e){
		System.exit( -1 );
	}	

	cou.content = 1;
	cou.url=argv[0];
	try
	{
        space.write(cou, null, net.jini.core.lease.Lease.FOREVER);
	}
	catch( Exception e )
	{
	    System.err.println("JavaSpace write error "+e.getMessage());
	    e.printStackTrace();
	    System.exit( -1 );
	}

	System.exit( 0 );
    }
}

//////////////////////////////////////////////////////////////

次にカウンタプログラムのソースを示す。

////////////////////////Countup.java//////////////////////////////////////

import net.jini.space.JavaSpace;

public class Countup {
    public static void main(String[] argv)
    {
	Lookup finder = new Lookup(JavaSpace.class);
	JavaSpace space = (JavaSpace) finder.getService();
	if( space == null )
	{
	    System.err.println("No JavaSpace found.");
	    System.exit( 1 );
	}

	Count template = new Count();
	template.url=argv[0];
	Count result;
	try
	{
	    result = (Count)space.take(template, null, Long.MAX_VALUE);
	    System.out.println("count:"+result.content);
	    System.out.println("url:"+result.url);
	    Count cou = new Count();
		cou.content = result.content+1;//new Integer(0) ;
		cou.url=argv[0];
		space.write(cou, null, net.jini.core.lease.Lease.FOREVER);
	}
	catch( Exception e )
	{
	    System.err.println("JavaSpace read error "+e.getMessage());
	    e.printStackTrace();
	    System.exit( -1 );
	}

	System.exit( 0 );
    }
}

//////////////////////////////////////////////////////////////

ここで上記プログラムを実行するにあたって次のタプルを設定した。
//////////////////Count.java//////////////////////
// From the JavaSpaces book
//package jsbook.chapter1.helloWorld;

import net.jini.core.entry.Entry;

public class Count implements Entry {
    public Integer content;
    public String url;

    public Count() {
    }
}
///////////////////////////////////////////////


次に実行結果を示す。

///////////////////////////
・初期化プログラム実行時
13351120059:homework koyama$ java -classpath .:/Users/koyama/Downloads/apache-river-2.2.2/lib/jini-core.jar:/Users/koyama/Downloads/apache-river-2.2.2/lib/jini-ext.jar:/Users/koyama/Downloads/apache-river-2.2.2/lib/reggie.jar:/Users/koyama/Downloads/apache-river-2.2.2/lib/outrigger.jar Initcou http://www.example.com/ 
13351120059:homework koyama$ java -classpath .:/Users/koyama/Downloads/apache-river-2.2.2/lib/jini-core.jar:/Users/koyama/Downloads/apache-river-2.2.2/lib/jini-ext.jar:/Users/koyama/Downloads/apache-river-2.2.2/lib/reggie.jar:/Users/koyama/Downloads/apache-river-2.2.2/lib/outrigger.jar Initcou http://www.example.com/hello.html

・カウンタプログラム実行時
13351120059:homework koyama$ java -classpath .:/Users/koyama/Downloads/apache-river-2.2.2/lib/jini-core.jar:/Users/koyama/Downloads/apache-river-2.2.2/lib/jini-ext.jar:/Users/koyama/Downloads/apache-river-2.2.2/lib/reggie.jar:/Users/koyama/Downloads/apache-river-2.2.2/lib/outrigger.jar Countup http://www.example.com/
count:1
url:http://www.example.com/
13351120059:homework koyama$ java -classpath .:/Users/koyama/Downloads/apache-river-2.2.2/lib/jini-core.jar:/Users/koyama/Downloads/apache-river-2.2.2/lib/jini-ext.jar:/Users/koyama/Downloads/apache-river-2.2.2/lib/reggie.jar:/Users/koyama/Downloads/apache-river-2.2.2/lib/outrigger.jar Countup http://www.example.com/
count:2
url:http://www.example.com/
13351120059:homework koyama$ java -classpath .:/Users/koyama/Downloads/apache-river-2.2.2/lib/jini-core.jar:/Users/koyama/Downloads/apache-river-2.2.2/lib/jini-ext.jar:/Users/koyama/Downloads/apache-river-2.2.2/lib/reggie.jar:/Users/koyama/Downloads/apache-river-2.2.2/lib/outrigger.jar Countup http://www.example.com/
count:3
url:http://www.example.com/
13351120059:homework koyama$ java -classpath .:/Users/koyama/Downloads/apache-river-2.2.2/lib/jini-core.jar:/Users/koyama/Downloads/apache-river-2.2.2/lib/jini-ext.jar:/Users/koyama/Downloads/apache-river-2.2.2/lib/reggie.jar:/Users/koyama/Downloads/apache-river-2.2.2/lib/outrigger.jar Countup http://www.example.com/hello.html
count:1
url:http://www.example.com/hello.html

////////////////////////////
次に説明を行う。今回のプログラムではカウンタ値とurlを格納するタプルを設定した。初期化プログラムではJavaSpaceを設定後、現在生存しているタプルの中で引数として与えられたurlが存在するか重複を確認する。存在した場合は、カウンタ値を戻し、終了する。無かった場合はプログラム下部にて追加している。カウンタプログラムでは、引数として与えられたurlでマッチングを行い、存在した場合は現在のカウンタ値をインクリメントし、takeによって取り除いたため、新たにurlと更新したカウンタ値を要素に加えたタプルを追加する。


