学籍番号: 201720691
名前:	
課題番号：5
題名：遠隔手続きについて

・問題(501) カウンタの例( SunRPC, XML Webサービス, Java RMI,および, dRuby) から１つを選び、次のようなメソッドを追加しなさい。
・void down()

SunRPCを使ってデクリメントするカウンタを作成した。以下プログラムを記述する
/////////////////////////////counter.h/////////////////////////////////////
/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _COUNTER_H_RPCGEN
#define _COUNTER_H_RPCGEN

#define RPCGEN_VERSION	199506

#include <rpc/rpc.h>


#define COUNTER_PROG ((rpc_uint)0x20052001)
#define COUNTER_VERSION ((rpc_uint)1)

#ifdef __cplusplus
#define COUNTER_DOWN ((rpc_uint)10)
extern "C" void * counter_down_1(void *, CLIENT *);
extern "C" void * counter_down_1_svc(void *, struct svc_req *);
#define COUNTER_UP ((rpc_uint)11)
extern "C" void * counter_up_1(void *, CLIENT *);
extern "C" void * counter_up_1_svc(void *, struct svc_req *);
#define COUNTER_GETVALUE ((rpc_uint)12)
extern "C" int * counter_getvalue_1(void *, CLIENT *);
extern "C" int * counter_getvalue_1_svc(void *, struct svc_req *);
#define COUNTER_RESET ((rpc_uint)13)
extern "C" void * counter_reset_1(int *, CLIENT *);
extern "C" void * counter_reset_1_svc(int *, struct svc_req *);

#elif __STDC__
#define COUNTER_DOWN ((rpc_uint)10)
extern  void * counter_down_1(void *, CLIENT *);
extern  void * counter_down_1_svc(void *, struct svc_req *);
#define COUNTER_UP ((rpc_uint)11)
extern  void * counter_up_1(void *, CLIENT *);
extern  void * counter_up_1_svc(void *, struct svc_req *);
#define COUNTER_GETVALUE ((rpc_uint)12)
extern  int * counter_getvalue_1(void *, CLIENT *);
extern  int * counter_getvalue_1_svc(void *, struct svc_req *);
#define COUNTER_RESET ((rpc_uint)13)
extern  void * counter_reset_1(int *, CLIENT *);
extern  void * counter_reset_1_svc(int *, struct svc_req *);

#else /* Old Style C */
#define COUNTER_DOWN ((rpc_uint)10)
extern  void * counter_down_1();
extern  void * counter_down_1_svc();
#define COUNTER_UP ((rpc_uint)11)
extern  void * counter_up_1();
extern  void * counter_up_1_svc();
#define COUNTER_GETVALUE ((rpc_uint)12)
extern  int * counter_getvalue_1();
extern  int * counter_getvalue_1_svc();
#define COUNTER_RESET ((rpc_uint)13)
extern  void * counter_reset_1();
extern  void * counter_reset_1_svc();
#endif /* Old Style C */

#endif /* !_COUNTER_H_RPCGEN */
//////////////////////////////////////////////////////////////////

/////////////////////////////counter.x/////////////////////////////////////
program COUNTER_PROG { 
   version COUNTER_VERSION {
   	   void     COUNTER_DOWN(void)       = 10 ; 
       void     COUNTER_UP(void)       = 11 ; 
       int      COUNTER_GETVALUE(void) = 12 ; 
       void	COUNTER_RESET(int)     = 13 ; 
   } = 1 ;
} = 0x20052001 ;
//////////////////////////////////////////////////////////////////

/////////////////////////////counter-server.c/////////////////////////////////////

/*
	counter-server.c -- The counter server using SunRPC.
	Created on: 2011/12/21 21:09:47
*/

#include <stdio.h>	/* stderr, fprintf() */
#include <stdlib.h>	/* strtol() */
#include <string.h>	/* memcpy() */
#include "counter.h"

static int val;

void *
counter_up_1_svc(void *argp, struct svc_req *rqstp)
{
	static char* result;
	val ++;
	return((void*) &result);
}
void *
counter_down_1_svc(void *argp, struct svc_req *rqstp)
{
	static char* result;
	val --;
	return((void*) &result);
}

int *
counter_getvalue_1_svc(void *argp, struct svc_req *rqstp)
{
	static int  result;
	result = val;
	return(&result);
}

void *
counter_reset_1_svc(int *argp, struct svc_req *rqstp)
{
	static char* result;
	val = *argp;
	return((void*) &result);
}
//////////////////////////////////////////////////////////////////

/////////////////////////////counter-client.c/////////////////////////////////////

/*
	counter-client.c -- counter client based on SunRPC
	Created on: 2011/12/21 20:56:17
*/

#include <stdio.h>	/* stderr, fprintf() */
#include <string.h>
#include <stdlib.h>	/* exit() */
#include "counter.h"

void usage( char *comname ) {
	fprintf(stderr,"Usage: %% %s server-host\n", comname);
	exit( 1 );
}

main( int argc, char *argv[], char *envp[] ) {
    char *server ;
    CLIENT *clnt;
    char *counter_up_arg; /* dummy */
    char *counter_down_arg;
    //void *counter_up_result;
    void *counter_down_result;
    char *counter_getvalue_arg; /* dummy */
    int  *counter_getvalue_result;
    int i;

	if( argc != 2 )
	    usage( argv[0] );
	server = argv[1];
	clnt = clnt_create(server,COUNTER_PROG,
			   COUNTER_VERSION, "tcp");
	if( clnt == NULL ) {
	    clnt_pcreateerror( server );
	    exit( 1 );
	}

	for( i=0; i<3; i++ )
	{
	    //counter_up_result = counter_up_1((void *)&counter_up_arg, clnt);
	    counter_down_result=counter_down_1((void *)&counter_down_arg, clnt);
	    //if( counter_up_result == NULL ) {
	    if(counter_down_result==NULL){
		//clnt_perror(clnt, "call failed -- up");
	    clnt_perror(clnt, "call failed -- down");
		exit( 2 );
	    }
	    //xdr_free( (xdrproc_t)xdr_void, (char *)counter_up_result );
	    xdr_free( (xdrproc_t)xdr_void, (char *)counter_down_result );

	    counter_getvalue_result = counter_getvalue_1((void *)&counter_getvalue_arg, clnt);
	    if( counter_getvalue_result == (void *) NULL )
	    {
		clnt_perror(clnt, "call failed -- getvalue");
		exit( 2 );
	    }
	    printf("value==%d\n", *counter_getvalue_result);
	    xdr_free( (xdrproc_t)xdr_int, (char *)counter_down_result );
	}
	clnt_destroy( clnt );
}
//////////////////////////////////////////////////////////////////

/////////////////////////////counter-clnt.c/////////////////////////////////////
/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include "counter.h"

/* Default timeout can be changed using clnt_control() */
static struct timeval TIMEOUT = { 25, 0 };

void *
counter_down_1(argp, clnt)
	void *argp;
	CLIENT *clnt;
{
	static char clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call(clnt, COUNTER_DOWN, xdr_void, argp, xdr_void, &clnt_res, TIMEOUT) != RPC_SUCCESS)
		return (NULL);
	return ((void *)&clnt_res);
}

void *
counter_up_1(argp, clnt)
	void *argp;
	CLIENT *clnt;
{
	static char clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call(clnt, COUNTER_UP, xdr_void, argp, xdr_void, &clnt_res, TIMEOUT) != RPC_SUCCESS)
		return (NULL);
	return ((void *)&clnt_res);
}

int *
counter_getvalue_1(argp, clnt)
	void *argp;
	CLIENT *clnt;
{
	static int clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call(clnt, COUNTER_GETVALUE, xdr_void, argp, xdr_int, &clnt_res, TIMEOUT) != RPC_SUCCESS)
		return (NULL);
	return (&clnt_res);
}

void *
counter_reset_1(argp, clnt)
	int *argp;
	CLIENT *clnt;
{
	static char clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call(clnt, COUNTER_RESET, xdr_int, argp, xdr_void, &clnt_res, TIMEOUT) != RPC_SUCCESS)
		return (NULL);
	return ((void *)&clnt_res);
}
//////////////////////////////////////////////////////////////////

/////////////////////////////counter-svc.c/////////////////////////////////////
/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include "counter.h"
#include <sys/ioctl.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <netdb.h>
#include <signal.h>
#include <sys/ttycom.h>
#include <memory.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <syslog.h>

#ifdef __STDC__
#define SIG_PF void(*)(int)
#endif

#ifdef DEBUG
#define RPC_SVC_FG
#endif

#define _RPCSVC_CLOSEDOWN 120
static int _rpcpmstart;		/* Started by a port monitor ? */
static int _rpcfdtype;		/* Whether Stream or Datagram ? */
static int _rpcsvcdirty;	/* Still serving ? */

static
void _msgout(msg)
	char *msg;
{
#ifdef RPC_SVC_FG
	if (_rpcpmstart)
		syslog(LOG_ERR, msg);
	else
		(void) fprintf(stderr, "%s\n", msg);
#else
	syslog(LOG_ERR, msg);
#endif
}

static void
closedown()
{
	if (_rpcsvcdirty == 0) {
		extern fd_set svc_fdset;
		static int size;
		int i, openfd;

		if (_rpcfdtype == SOCK_DGRAM)
			exit(0);
		if (size == 0) {
			size = getdtablesize();
		}
		for (i = 0, openfd = 0; i < size && openfd < 2; i++)
			if (FD_ISSET(i, &svc_fdset))
				openfd++;
		if (openfd <= (_rpcpmstart?0:1))
			exit(0);
	}
	(void) alarm(_RPCSVC_CLOSEDOWN);
}

static void
counter_prog_1(rqstp, transp)
	struct svc_req *rqstp;
	SVCXPRT *transp;
{
	union {
		int counter_reset_1_arg;
	} argument;
	char *result;
	bool_t (*xdr_argument)(), (*xdr_result)();
	char *(*local)();

	_rpcsvcdirty = 1;
	switch (rqstp->rq_proc) {
	case NULLPROC:
		(void) svc_sendreply(transp, (xdrproc_t) xdr_void, (char *)NULL);
		_rpcsvcdirty = 0;
		return;

	case COUNTER_DOWN:
		xdr_argument = xdr_void;
		xdr_result = xdr_void;
		local = (char *(*)()) counter_down_1_svc;
		break;

	case COUNTER_UP:
		xdr_argument = xdr_void;
		xdr_result = xdr_void;
		local = (char *(*)()) counter_up_1_svc;
		break;

	case COUNTER_GETVALUE:
		xdr_argument = xdr_void;
		xdr_result = xdr_int;
		local = (char *(*)()) counter_getvalue_1_svc;
		break;

	case COUNTER_RESET:
		xdr_argument = xdr_int;
		xdr_result = xdr_void;
		local = (char *(*)()) counter_reset_1_svc;
		break;

	default:
		svcerr_noproc(transp);
		_rpcsvcdirty = 0;
		return;
	}
	(void) memset((char *)&argument, 0, sizeof (argument));
	if (!svc_getargs(transp, xdr_argument, (caddr_t) &argument)) {
		svcerr_decode(transp);
		_rpcsvcdirty = 0;
		return;
	}
	result = (*local)(&argument, rqstp);
	if (result != NULL && !svc_sendreply(transp, (xdrproc_t) xdr_result, result)) {
		svcerr_systemerr(transp);
	}
	if (!svc_freeargs(transp, xdr_argument, (caddr_t) &argument)) {
		_msgout("unable to free arguments");
		exit(1);
	}
	_rpcsvcdirty = 0;
	return;
}



int
main(argc, argv)
int argc;
char *argv[];
{
	SVCXPRT *transp = NULL;
	int sock;
	int proto = 0;
	struct sockaddr_in saddr;
	int asize = sizeof (saddr);

	if (getsockname(0, (struct sockaddr *)&saddr, &asize) == 0) {
		int ssize = sizeof (int);

		if (saddr.sin_family != AF_INET)
			exit(1);
		if (getsockopt(0, SOL_SOCKET, SO_TYPE,
				(char *)&_rpcfdtype, &ssize) == -1)
			exit(1);
		sock = 0;
		_rpcpmstart = 1;
		proto = 0;
		openlog("counter", LOG_PID, LOG_DAEMON);
	} else {
#ifndef RPC_SVC_FG
		int size;
		int pid, i;

		pid = fork();
		if (pid < 0) {
			perror("cannot fork");
			exit(1);
		}
		if (pid)
			exit(0);
		size = getdtablesize();
		for (i = 0; i < size; i++)
			(void) close(i);
		i = open("/dev/console", 2);
		(void) dup2(i, 1);
		(void) dup2(i, 2);
		i = open("/dev/tty", 2);
		if (i >= 0) {
			(void) ioctl(i, TIOCNOTTY, (char *)NULL);
			(void) close(i);
		}
		openlog("counter", LOG_PID, LOG_DAEMON);
#endif
		sock = RPC_ANYSOCK;
		(void) pmap_unset(COUNTER_PROG, COUNTER_VERSION);
	}

	if ((_rpcfdtype == 0) || (_rpcfdtype == SOCK_DGRAM)) {
		transp = svcudp_create(sock);
		if (transp == NULL) {
			_msgout("cannot create udp service.");
			exit(1);
		}
		if (!_rpcpmstart)
			proto = IPPROTO_UDP;
		if (!svc_register(transp, COUNTER_PROG, COUNTER_VERSION, counter_prog_1, proto)) {
			_msgout("unable to register (COUNTER_PROG, COUNTER_VERSION, udp).");
			exit(1);
		}
	}

	if ((_rpcfdtype == 0) || (_rpcfdtype == SOCK_STREAM)) {
		if (_rpcpmstart)
			transp = svcfd_create(sock, 0, 0);
		else
			transp = svctcp_create(sock, 0, 0);
		if (transp == NULL) {
			_msgout("cannot create tcp service.");
			exit(1);
		}
		if (!_rpcpmstart)
			proto = IPPROTO_TCP;
		if (!svc_register(transp, COUNTER_PROG, COUNTER_VERSION, counter_prog_1, proto)) {
			_msgout("unable to register (COUNTER_PROG, COUNTER_VERSION, tcp).");
			exit(1);
		}
	}

	if (transp == (SVCXPRT *)NULL) {
		_msgout("could not create a handle");
		exit(1);
	}
	if (_rpcpmstart) {
		(void) signal(SIGALRM, (void(*)()) closedown);
		(void) alarm(_RPCSVC_CLOSEDOWN);
	}
	svc_run();
	_msgout("svc_run returned");
	exit(1);
	/* NOTREACHED */
}
//////////////////////////////////////////////////////////////////


次に実行結果を以下に示す。
koyamahiroshinin-no-MacBook-Air:counter-rpc koyama$ ./counter-client localhost
value==-1
value==-2
value==-3
koyamahiroshinin-no-MacBook-Air:counter-rpc koyama$ ./counter-client localhost
value==-4
value==-5
value==-6
koyamahiroshinin-no-MacBook-Air:counter-rpc koyama$ ./counter-client localhost
value==-7
value==-8
value==-9

次にプログラムの説明を行う。counter.xにてデクリメント関数を定義する定数を10に設定した。それに伴い、counter.hにdown関数を追加し、counter-server.cのサーバー側で変数valueを減少させる関数を作成した。down関数の仕様は基本up関数と同じである。
